---
kind: pipeline
name: agrammon
type: docker

services:
    - name: database
      image: postgres
      ports:
        - 5432
      environment:
        POSTGRES_USER: agrammon
        POSTGRES_DB: agrammon_ci
        POSTGRES_PASSWORD: agrammonATwork

volumes:
    - name: dockersock
      host:
          path: /var/run/docker.sock


steps:
- name: buildDockerImage
  image: docker
  volumes:
    - name: dockersock
      path: /var/run/docker.sock
  commands:
    - IMG=agrammon-runner-ubuntu-18.04
    - SHA=$( sha1sum dev/Dockerfile-ubuntu:18.04 | awk '{print $1}')
    - echo IMG=$IMG SHA=$SHA
    - test "$(docker images $IMG:$SHA -q)" = "" || exit 0
    - docker build -t $IMG:$SHA -f dev/Dockerfile-ubuntu:18.04 dev
    - docker tag $IMG:$SHA $IMG:latest

# - name: frontend
#   image: oposs/agrammon-runner:latest
#   privileged: true
#   commands:
#       - ln -s /home/agrammon/node_modules /drone/src/frontend/
#       - chown -R agrammon:agrammon /drone/src
#       - export AGRAMMON_DIR=/drone/src
#       - export AGRAMMON_CONFIG=/drone/src/t/test-data/etc-frontend-tests/agrammon.cfg
#       - /home/agrammon/entrypoint.sh qx package migrate
#       - /home/agrammon/entrypoint.sh test-frontend


- name: backend
  image: agrammon-runner:latest
  pull: never
  depends_on:
      - buildDockerImage
  privileged: true
  environment:
      AGRAMMON_DIR: /drone/src
      AGRAMMON_CONFIG: /drone/src/t/test-data/etc-backend-tests/agrammon.cfg
      TEST_JOBS: 4
      RAKUDOLIB: lib

  commands:
      - ls -al $AGRAMMON_DIR
      - raku -v
      - zef --debug --/test --deps-only install .
      - zef locate YAMLish
      - ls -al /
      - ls -al /opt/rakudo-pkg/
      - ls -al $HOME
      - prove -v -r --exec=raku t/config.t

# - name: store-raku-cache
#   image: meltwater/drone-cache:dev
#   pull: never
#   settings:
#       backend: filesystem
#       rebuild: true
# #      cache_key: pkg +"-"+env.key+"-cpan-{{ checksum \"" +pkg +"/cpanfile\" }}",
#       archive_format: gzip
#       mount:
#           - pkg +"/thirdparty"
#       volumes":
#           -name: cache
#            path: /tmp/cache

# - name: complete
#   image: alpine
#   # depends_on: [ frontend, backend ]
#   depends_on: [ backend ]
#   commands:
#     - echo "ALL DONE."
#
# END
