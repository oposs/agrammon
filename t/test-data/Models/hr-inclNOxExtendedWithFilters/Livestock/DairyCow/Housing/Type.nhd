*** general ***

author   = Agrammon Group
date     = 2008-02-19
taxonomy = Livestock::DairyCow::Housing::Type

+short

Selects the emission rate and other correction factors for the specific housing types for dairy cows. 

+description

 This process selects the correction factor for the specific housing types for dairy cows. Among these correction factors are the emission rate for the housing type, the correction factor for the housing type area, the correction factor for the area per animal, the liquid and solid share for the housing type as well as the factor on what barn size increases the regularized minimal (limited to 0.5).


*** input ***

+housing_type
  type  = enum
  ++enum
    +++Tied_Housing_Slurry
       en = tied_housing_slurry
       de = Anbindestall_mit_Produktion_von_Vollgülle
       fr = Stabulation_entravée_avec_production_de_lisier_complet
       it = Tied_Housing_Slurry
    +++Tied_Housing_Slurry_Plus_Solid_Manure
       en = tied_housing_slurry_plus_solid_manure
       de = Anbindestall_mit_Produktion_von_Gülle_und_Mist
       fr = Stabulation_entravée_avec_production_de_lisier_et_de_fumier
       it = Tied_Housing_Slurry_Plus_Solid_Manure
    +++Loose_Housing_Slurry
       en = loose_housing_slurry
       de = Laufstall_mit_Produktion_von_Vollgülle
       fr = Stabulation_libre_avec_production_de_lisier_complet
       it = Loose_Housing_Slurry
    +++Loose_Housing_Slurry_Plus_Solid_Manure
       en = loose_housing_slurry_plus_solid_manure
       de = Laufstall_mit_Produktion_von_Gülle_und_Mist
       fr = Stabulation_libre_avec_production_de_lisier_et_de_fumier
       it = Loose_Housing_Slurry_Plus_Solid_Manure
    +++Loose_Housing_Deep_Litter
       en = loose_housing_deep_litter
       de = Laufstall_mit_Tiefstreu_oder_Tretmist
       fr = Stabulation_libre_avec_litière_profonde_ou_litière_sur_plan_incliné
       it = Loose_Housing_Deep_Litter
  ++labels 
    en = Housing system
    de = Aufstallung
    fr = Type de stabulation
  ++units  
    en = -
  ++description
    Type of housing.
  ++help
    +++en
       <p>Standard values for Switzerland: </p>
       <p>Tied Housing Slurry: 18%</p> 
       <p>Tied Housing Slurry Plus Solid Manure: 35%</p> 
       <p>Loose Housing Slurry: 35%</p> 
       <p>Loose Housing Slurry Plus Solid Manure: 11%</p>
    +++de
       <dl>
               <dt>Laufstall mit Produktion von Vollgülle:</dt>
               <dd>Mehrraum-Laufstall, Liegefläche mit Liegeboxen</dd>
               <dt>Laufstall mit Produktion von Gülle und Mist:</dt>
               <dd>Mehrraum-Laufstall, Liegefläche mit Liegeboxen (Gülle und bedeutende Mengen Mist)</dd>
               <dd>Mehrraum-Laufstall, Liegefläche als Tiefstreu/Tretmist</dd>
               <dt>Laufstall mit Tiefstreu/Tretmist:</dt>
               <dd> Einraum-Laufstall mit Tiefstreu/Tretmist (ausschliesslich Mist)</dd>
       </dl>
       <p/>
       <p>Vorschlag für Standardwerte: </p>
       <p>Im Jahr 2010 war der Anteil der Aufstallungssysteme wie folgt: </p>
       <p>Anbindestall mit Produktion von Vollgülle: 18%</p> 
       <p>Anbindestall mit Produktion von Gülle und Mist: 35%</p> 
       <p>Laufstall mit Produktion von Vollgülle: 35%</p> 
       <p>Laufstall mit Produktion von Gülle und Mist: 11%</p>
       <p>Laufstall mit Tiefstreue / Tretmist: 1%</p>
    +++fr
       <p>Proposition de valeurs standard: </p>
       <p>En 2010, les différents systèmes de stabulation se répartissaient de la manière suivante: </p>
       <p>Stabulation entravée avec production lisier complet: 18%</p> 
       <p>Stabulation entravée avec production de lisier et de fumier: 35%</p> 
       <p>Stabulation libre avec production de lisier complet: 35%</p> 
       <p>Stabulation libre avec production de lisier et de fumier: 10%</p>
       <p>Stabulation libre avec litière profonde ou litière sur plan incliné: 1%</p>

+dimensioning_barn
  type = integer
  adjustBranching = true
  ++labels 
    en = Number of available animal places
    de = Anzahl Tierplätze im Stall
    fr = Nombre de places dans l'étable
  ++units 
    en = -
  ++description
    Number of available animal places.
  ++help
    +++en
       <p>For loose housing systems: all animal places accessible for the animals must be entered. The number of animal places is higher than the stocking rate if reserve capacities are available, e.g. for a future increase of the herd size</p> 
       <p>Standard value for Switzerland: number of available animal places equal to number of animals</p>
    +++de
       <p>Für Laufställe: es sind sämtliche Tierplätze anzugeben, welche für die Tiere zugänglich sind. Die Anzahl Tierplätze im Stall ist grösser als der Bestand, wenn etwa im Hinblick auf eine zukünftige Vergrösserung des Betriebs zusätzliche Tierplätze vorhanden sind. Mehr Tierplätze als Tiere bedeuten für Laufställe eine Erhöhung der verschmutzten Fläche pro Tier. Im Gegensatz dazu führen mehr Tierplätze als Tiere bei Anbindeställen kaum zu einer Erhöhung der verschmutzten Fläche pro Tier, da die freien Tierplätze für die Tiere nicht zugänglich sind.</p>
       <p>Vorschlag für Standardwert: gleiche Anzahl Tierplätze wie Tierzahl</p>
    +++fr
       <p>Pour les stabulations libres: mentionner toutes les places accessibles aux animaux. Le nombre de places dans l'étable peut être supérieur au cheptel actuel, dans la perspective d'un agrandissement futur de l'exploitation p.ex. Dans les stabulations libres, un nombre de places supérieur au nombre d'animaux signifie une augmentation de la surface souillée par animal. Au contraire, dans les stabulations entravées, un nombre de places supérieur au nombre d'animaux ne conduit pas à une augmentation de la surface souillée par animal, vu que ces places libres ne sont pas accessibles aux animaux.  </p>
       <p>Proposition de valeur standard: nombre de places identique au nombre d'animaux </p>

+feeding_boxes
  models = LU
  type = enum
  default_calc = no
  ++enum
    +++yes
       en = yes
       de = Ja
       fr = oui
       it = yes
    +++no
       en = no
       de = Nein
       fr = non
       it = no
  ++labels 
    en = Are feeding boxes available?
    de = Sind Fütterungsbuchten vorhanden?
    fr = Sont des boxes d'alimentation existant?
  ++units 
    en = -
  ++description
    Are feeding boxes available?
  ++help
    +++en
       <p> </p>
    +++de
       <p> </p>
       <p> </p>
    +++fr
       <p> </p>

*** technical ***

+red_feeding_boxes
  value = 0.1
  ++units
    en = -
  ++description
    Reduction efficiency for LU Model version (Workshop SHL Zollikofen, 08.02.2010)


*** external ***

+..::Excretion
+Type::Tied_Housing_Slurry
+Type::Tied_Housing_Slurry_Plus_Solid_Manure
+Type::Loose_Housing_Slurry
+Type::Loose_Housing_Slurry_Plus_Solid_Manure
+Type::Loose_Housing_Deep_Litter

*** output ***

+er_housing
  print = 10
  ++units 
    en = -
  ++description
    Emission rate for the housing type.
  ++formula
#    Val(er_housing, 'Type::' . In(housing_type));
       given ( In(housing_type) ) {
           return Val(er_housing,Type::Tied_Housing_Slurry)                    when 'Tied_Housing_Slurry';
           return Val(er_housing,Type::Tied_Housing_Slurry_Plus_Solid_Manure)  when 'Tied_Housing_Slurry_Plus_Solid_Manure';
           return Val(er_housing,Type::Loose_Housing_Slurry)                   when 'Loose_Housing_Slurry';
           return Val(er_housing,Type::Loose_Housing_Slurry_Plus_Solid_Manure) when 'Loose_Housing_Slurry_Plus_Solid_Manure';
           return Val(er_housing,Type::Loose_Housing_Deep_Litter)              when 'Loose_Housing_Deep_Litter';
       }

+share_liquid
  print = 10
  ++units 
    en = -
  ++description
    Liquid share for the housing type.
  ++formula
       given ( In(housing_type) ) {
           return Val(share_liquid,Type::Tied_Housing_Slurry)                    when 'Tied_Housing_Slurry';
           return Val(share_liquid,Type::Tied_Housing_Slurry_Plus_Solid_Manure)  when 'Tied_Housing_Slurry_Plus_Solid_Manure';
       return Val(share_liquid,Type::Loose_Housing_Slurry)                   when 'Loose_Housing_Slurry';
           return Val(share_liquid,Type::Loose_Housing_Slurry_Plus_Solid_Manure) when 'Loose_Housing_Slurry_Plus_Solid_Manure';
           return Val(share_liquid,Type::Loose_Housing_Deep_Litter)              when 'Loose_Housing_Deep_Litter';
       }

+share_solid
  print = 10
  ++units 
    en = -
  ++description
    Solid share for the housing type.
  ++formula
#      Val(share_solid, 'Type::' . In(housing_type));
       given ( In(housing_type) ) {
           return Val(share_solid,Type::Tied_Housing_Slurry)                    when 'Tied_Housing_Slurry';
           return Val(share_solid,Type::Tied_Housing_Slurry_Plus_Solid_Manure)  when 'Tied_Housing_Slurry_Plus_Solid_Manure';
       return Val(share_solid,Type::Loose_Housing_Slurry)                   when 'Loose_Housing_Slurry';
           return Val(share_solid,Type::Loose_Housing_Slurry_Plus_Solid_Manure) when 'Loose_Housing_Slurry_Plus_Solid_Manure';
           return Val(share_solid,Type::Loose_Housing_Deep_Litter)              when 'Loose_Housing_Deep_Litter';
       }

+k_area_type
  print = 255
  ++units 
    en = -
  ++description
    Correction factor for the housing type area.
  ++formula
#      Val(k_area, 'Type::' . In(housing_type));
       given ( In(housing_type) ) {
           return Val(k_area,Type::Tied_Housing_Slurry)                    when 'Tied_Housing_Slurry';
           return Val(k_area,Type::Tied_Housing_Slurry_Plus_Solid_Manure)  when 'Tied_Housing_Slurry_Plus_Solid_Manure';
       return Val(k_area,Type::Loose_Housing_Slurry)                   when 'Loose_Housing_Slurry';
           return Val(k_area,Type::Loose_Housing_Slurry_Plus_Solid_Manure) when 'Loose_Housing_Slurry_Plus_Solid_Manure';
           return Val(k_area,Type::Loose_Housing_Deep_Litter)              when 'Loose_Housing_Deep_Litter';
       }


+area_increase
  print = 15
  ++units 
    en = -
  ++description
    Factor on what barn size does increase the regularized minimal, limited to 0.5.
  ++formula 
    if((Val(dairy_cows, ..::Excretion) < In(dimensioning_barn) ) and (Val(dairy_cows, ..::Excretion) != 0)){ 
        if(In(dimensioning_barn) >= (Val(dairy_cows, ..::Excretion) * 1.5)){   
            return 0.5; 
        }
        else { 
            if(Val(dairy_cows , ..::Excretion) > 0){ 
                return((In(dimensioning_barn) / Val(dairy_cows, ..::Excretion)) -1);
            }
            else {
                 return 0;
            }
        }
    }
    else {
        return 0.0;
    };

+k_area
  print = 15
  ++units 
    en = -
  ++description
    Correction factor for area per animal.
  ++formula
    1 + (Out(area_increase) * Out(k_area_type));

+housing_type
  print = 15
  ++units 
    en = -
  ++description
    Housing type (needed in other modules).
  ++formula
    In(housing_type);

+dimensioning_barn
  print = 15
  ++units 
    en = -
  ++description
    Number of anymal places (needed in other modules).
  ++formula
    In(dimensioning_barn);

+c_feeding_boxes
  print = 15
  ++units 
    en = -
  ++description
    Are feeding boxes available?
  ++formula
    if(defined In(feeding_boxes) and In(feeding_boxes) eq 'yes'){ 
        if((In(housing_type) eq 'Tied_Housing_Slurry') or (In(housing_type) eq 'Tied_Housing_Slurry_Plus_Solid_Manure')){
            writeLog({en=>"Feeding boxes are applicable for loose housing systems only!",
              de=>"Fütterungsbuchten sind nur für Laufställe anwendbar!",
              fr=>"Franz.: Fütterungsbuchten sind nur für Laufställe anwendbar!"});
            return 0;
       } 
       else{
               return( Tech(red_feeding_boxes));
       }
    }
    else {
        return 0;
    };

